# A workflow that checks for changes to the channel field in rust-toolchain.toml on pull requests.
#
##
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: Apache-2.0
##
name: Rust Version Change Detection

on:
  workflow_call:

jobs:
  check-rust-version:
    runs-on: ubuntu-latest

    steps:
      - name: Generate Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.PATINA_AUTOMATION_APPLICATION_ID }}
          private-key: ${{ secrets.PATINA_AUTOMATION_APPLICATION_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: ‚úÖ Checkout PR ‚úÖ
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: ‚úÖ Fetch the base branch ‚úÖ
        run: git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: üîç Check for rust-version changes üîç
        id: check-changes
        run: |
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD -- rust-toolchain.toml)

          if echo "$DIFF" | grep -E "^[-+].*channel\s*="; then
            echo "rust_version_changed=true" >> $GITHUB_OUTPUT

            OLD_VERSION=$(echo "$DIFF" | grep -E "^-.*channel\s*=" | sed -E 's/^-.*channel\s*=\s*["]?([^"\s]+)["]?.*/\1/' || echo "unknown")
            NEW_VERSION=$(echo "$DIFF" | grep -E "^\+.*channel\s*=" | sed -E 's/^\+.*channel\s*=\s*["]?([^"\s]+)["]?.*/\1/' || echo "unknown")

            echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "rust_version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: ‚úçÔ∏è Comment on PR ‚úçÔ∏è
        if: steps.check-changes.outputs.rust_version_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const oldVersion = '${{ steps.check-changes.outputs.old_version }}';
            const newVersion = '${{ steps.check-changes.outputs.new_version }}';

            // Check if we've already commented on this PR
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const workflowCommentExists = comments.data.some(comment =>
              comment.body.includes('*This comment was automatically generated by the rust-version-check workflow.*')
            );

            if (workflowCommentExists) {
              console.log('Rust version change comment already exists on this PR. Skipping comment creation.');
              return;
            }

            const comment = `## Rust Version is Being Changed!

            This pull request modifies the \`channel\` field in \`rust-toolchain.toml\`:

            **Previous version:** \`${oldVersion}\`
            **New version:** \`${newVersion}\`

            ### ‚ö†Ô∏è Reviewer Action Required

            Please verify that:
            - [ ] All team members have sufficient review time for the change
            - [ ] CI/CD pipelines support the new Rust version
            - [ ] Documentation is updated if needed
            - [ ] The \`rust-version\` field in Cargo.toml is updated if the minimum supported Rust version must change.
              - See the "Updating the Minimum Supported Rust Version" section in the readme for more details.
            - [ ] The PR meets the requirements in the [Rust Version Update Policy](https://github.com/OpenDevicePartnership/patina/blob/main/README.md)
            ---
            *This comment was automatically generated by the rust-version-check workflow.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
